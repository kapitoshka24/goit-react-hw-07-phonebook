{"version":3,"sources":["redux/contacts/contacts-actions.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-reducers.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactForm/ContactFormContainer.js","components/Filter/Filter.js","components/Filter/FilterContainer.js","components/ContactList/ContactList.js","components/ContactList/ContactListContainer.js","App.js","index.js"],"names":["actions","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","operations","fetchContacts","dispatch","a","get","then","data","catch","error","addContact","contact","post","deleteContact","contactId","delete","getContacts","state","contacts","items","getFilter","filter","selectors","getLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","name","includes","createReducer","_","payload","id","combineReducers","store","configureStore","reducer","contactsReducers","ContactForm","number","nameInputId","shortid","generate","numberInputId","handleChange","evt","target","value","setState","findByName","contactName","props","some","handleSubmit","preventDefault","alert","onAdd","reset","this","onSubmit","type","onChange","pattern","title","required","Component","connect","Filter","onChangeFilter","ContactList","onDelete","map","onClick","isLoading","className","color","height","width","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e1b2b16c.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst fetchContactsRequest = createAction(\"contacts/fetchContactsRequest\");\r\nconst fetchContactsSuccess = createAction(\"contacts/fetchContactsSuccess\");\r\nconst fetchContactsError = createAction(\"contacts/fetchContactsError\");\r\n\r\nconst addContactRequest = createAction(\"contacts/addContactRequest\");\r\nconst addContactSuccess = createAction(\"contacts/addContactSuccess\");\r\nconst addContactError = createAction(\"contacts/addContactError\");\r\n\r\nconst deleteContactRequest = createAction(\"contacts/deleteContactRequest\");\r\nconst deleteContactSuccess = createAction(\"contacts/deleteContactSuccess\");\r\nconst deleteContactError = createAction(\"contacts/deleteContactError\");\r\n\r\nconst changeFilter = createAction(\"contacts/filter\");\r\n\r\nconst actions = {\r\n  fetchContactsRequest,\r\n  fetchContactsSuccess,\r\n  fetchContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n  changeFilter,\r\n};\r\n\r\nexport default actions;\r\n","import axios from \"axios\";\r\nimport { actions } from \"./\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:4040\";\r\n\r\nconst fetchContacts = () => async (dispatch) => {\r\n  dispatch(actions.fetchContactsRequest());\r\n\r\n  axios\r\n    .get(\"/contacts\")\r\n    .then(({ data }) => dispatch(actions.fetchContactsSuccess(data)))\r\n    .catch((error) => dispatch(actions.fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = (contact) => (dispatch) => {\r\n  dispatch(actions.addContactRequest());\r\n\r\n  axios\r\n    .post(\"/contacts\", contact)\r\n    .then(({ data }) => dispatch(actions.addContactSuccess(data)))\r\n    .catch((error) => dispatch(actions.addContactError(error)));\r\n};\r\n\r\nconst deleteContact = (contactId) => (dispatch) => {\r\n  dispatch(actions.deleteContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(actions.deleteContactSuccess(contactId)))\r\n    .catch((error) => dispatch(actions.deleteContactError(error)));\r\n};\r\n\r\nconst operations = {\r\n  fetchContacts,\r\n  addContact,\r\n  deleteContact,\r\n};\r\n\r\nexport default operations;\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst getContacts = (state) => state.contacts.items;\r\nconst getFilter = (state) => state.contacts.filter;\r\nconst getLoading = (state) => state.contacts.loading;\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(normalizedFilter)\r\n    );\r\n  }\r\n);\r\n\r\nconst selectors = {\r\n  getContacts,\r\n  getFilter,\r\n  getLoading,\r\n  getVisibleContacts,\r\n};\r\n\r\nexport default selectors;\r\n","import { createReducer } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\nimport { actions } from \"./\";\r\n\r\nconst items = createReducer([], {\r\n  [actions.fetchContactsSuccess]: (_, { payload }) => payload,\r\n  [actions.addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [actions.deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [actions.fetchContactsRequest]: () => true,\r\n  [actions.fetchContactsSuccess]: () => false,\r\n  [actions.fetchContactsError]: () => false,\r\n\r\n  [actions.addContactRequest]: () => true,\r\n  [actions.addContactSuccess]: () => false,\r\n  [actions.addContactError]: () => false,\r\n\r\n  [actions.deleteContactRequest]: () => true,\r\n  [actions.deleteContactSuccess]: () => false,\r\n  [actions.deleteContactError]: () => false,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport { contactsReducers } from \"./contacts/\";\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducers,\r\n  },\r\n});\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactForm.css\";\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string))\r\n      .isRequired,\r\n    onAdd: PropTypes.func.isRequired,\r\n  };\r\n\r\n  state = {\r\n    id: \"\",\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  handleChange = (evt) => {\r\n    const { name, value } = evt.target;\r\n\r\n    this.setState({\r\n      [name]: value,\r\n    });\r\n  };\r\n\r\n  findByName = (contactName) => {\r\n    return this.props.contacts.some(({ name }) => name === contactName);\r\n  };\r\n\r\n  handleSubmit = (evt) => {\r\n    evt.preventDefault();\r\n\r\n    const { name } = this.state;\r\n\r\n    if (this.findByName(name)) {\r\n      alert(`${name} is already in contacts!`);\r\n      return;\r\n    }\r\n\r\n    this.props.onAdd(this.state);\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <form onSubmit={this.handleSubmit}>\r\n        <label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            onChange={this.handleChange}\r\n            value={name}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            id={this.nameInputId}\r\n            required\r\n          />\r\n        </label>\r\n        <label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            onChange={this.handleChange}\r\n            value={number}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            id={this.numberInputId}\r\n            required\r\n          />\r\n        </label>\r\n        <button>Add contact</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ContactForm;\r\n","import { connect } from \"react-redux\";\r\nimport { operations, selectors } from \"../../redux/contacts/\";\r\nimport ContactForm from \"./ContactForm\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  contacts: selectors.getContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onAdd: (contact) => dispatch(operations.addContact(contact)),\r\n  fetchContacts: () => dispatch(operations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Filter.css\";\r\n\r\nconst Filter = ({ value, onChangeFilter }) => (\r\n  <label>\r\n    Find contacts by name\r\n    <input type=\"text\" value={value} onChange={onChangeFilter} />\r\n  </label>\r\n);\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","import { connect } from \"react-redux\";\r\nimport { selectors, actions } from \"../../redux/contacts/\";\r\nimport Filter from \"./Filter\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: selectors.getFilter(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChangeFilter: (evt) => dispatch(actions.changeFilter(evt.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from \"react\";\r\nimport shortid from \"shortid\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./ContactList.css\";\r\n\r\nconst ContactList = ({ items, onDelete }) => (\r\n  <ol>\r\n    {items.map(({ id, name, number }) => (\r\n      <li key={shortid.generate()}>\r\n        {name}: {number}\r\n        <button onClick={() => onDelete(id)}>Delete</button>\r\n      </li>\r\n    ))}\r\n  </ol>\r\n);\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string)).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { connect } from \"react-redux\";\r\nimport { operations, selectors } from \"../../redux/contacts/\";\r\nimport ContactList from \"./ContactList\";\r\n\r\nconst mapStateToProps = (state) => ({\r\n  items: selectors.getVisibleContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDelete: (contactId) => dispatch(operations.deleteContact(contactId)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { selectors } from \"./redux/contacts/\";\nimport ContactForm from \"./components/ContactForm\";\nimport Filter from \"./components/Filter\";\nimport ContactList from \"./components/ContactList\";\nimport Loader from \"react-loader-spinner\";\n\nconst App = ({ isLoading }) => (\n  <>\n    <h1>Phonebook</h1>\n    <ContactForm />\n    <h2>Contacts</h2>\n    <Filter />\n\n    {isLoading ? (\n      <Loader\n        className=\"Loader\"\n        type=\"Bars\"\n        color=\"#45a049\"\n        height={50}\n        width={50}\n      />\n    ) : (\n      <ContactList />\n    )}\n  </>\n);\n\nconst mapStateToProps = (state) => ({\n  isLoading: selectors.getLoading(state),\n});\n\nexport default connect(mapStateToProps)(App);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}